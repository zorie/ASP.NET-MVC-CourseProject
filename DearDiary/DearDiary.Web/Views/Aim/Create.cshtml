@using DearDiary.Models

@model DearDiary.Web.Models.CreateAimViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create Aim</h2>
<hr />
@if (TempData["Country"] != null)
{
    <div class="alert alert-success" role="alert">
        @TempData["Country"]
    </div>
}
@if (TempData["City"] != null)
{
    <div class="alert alert-success" role="alert">
        @TempData["City"]
    </div>
}
@if (TempData["InvalidCategory"] != null)
{
    <div class="alert alert-success" role="alert">
        @TempData["InvalidCategory"]
    </div>
}
    @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        <div class="loginBox">
            <div class="form-horizontal">
                <br />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>                

                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Description, 5, 50, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("Status", new SelectList(Enum.GetValues(typeof(Status))),
                                            "Please select status", new { style = "width:250px", @class = "dropdown1" })                        
                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })                  
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CountryId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("Country", ViewData["country"] as List<SelectListItem>, "Please select a country", new { style = "width:250px", @class = "dropdown1" })
                        @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })                    
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.CityId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("city", new SelectList(string.Empty, "Value", "Text"), "", new { style = "width:250px", @class = "dropdown1" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AimCategoryId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("Category", ViewData["category"] as List<SelectListItem>, "Please select a category", new { style = "width:250px", @class = "dropdown1" })
                        @Html.ValidationMessageFor(model => model.AimCategoryId, "", new { @class = "text-danger" })                    
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Photo, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.Photo, new { type = "file" })
                        @Html.ValidationMessageFor(m => m.Photo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        @Html.ActionLink("Back to List", "Index", "Aim", new { area = "" }, null)
                    </div>
                </div>
            </div>            
        </div>
    }    

@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    
<script type="text/javascript">
     $(document).ready(function () {
         $("#Country").change(function () {
             $("#city").empty();
             $.ajax({
                 type: 'POST',
                 url: '@Url.Action("GetCities")', 
 
                 dataType: 'json',
 
                 data: { id: $("#Country").val() },
 
                 success: function (cities) {
                     
                     $.each(cities, function (i, city) {
                     $("#city").append('<option value="' + city.Value + '">' +
                          city.Text + '</option>');
                     });
                 },
                 error: function (ex) {
                     alert('Failed to retrieve cities.' + ex);
                 }
             });
             return false;
         })
     });
 </script>
}


